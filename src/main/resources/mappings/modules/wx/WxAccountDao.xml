<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.pcitech.iLife.modules.wx.dao.WxAccountDao">
    
	<sql id="wxAccountColumns">
		a.id AS "id",
		a.name AS "name",
		a.original_id AS "originalId",
		a.description AS "description",
		a.qrcode_img AS "qrcodeImg",
		a.status AS "status",
		a.broker_id AS "broker.id",
		a.create_by AS "createBy.id",
		a.create_date AS "createDate",
		a.update_by AS "updateBy.id",
		a.update_date AS "updateDate",
		a.del_flag AS "delFlag"
	</sql>
	
	<sql id="wxAccountJoins">
		LEFT JOIN sys_user uu ON uu.id = a.update_by 
		LEFT JOIN mod_broker b ON b.id = a.broker_id	
	</sql>
    

	<!-- 查询置顶列表：根据权重倒序排列，仅显示在当前时间段的列表。能够根据当前用户openid及发布者openid过滤。注意，由于是付费，不受阅豆低于-5影响 -->
	<select id="findToppingList" resultType="WxAccount">
		SELECT 
		a.id AS "id",
		a.name AS "name",
		a.original_id AS "originalId",
		a.description AS "description",
		tt.advertise_weight AS "status",
		a.broker_id AS "broker.id",
		b.nickname AS "broker.nickname",
		b.name AS "broker.name",
		b.points AS "broker.points",
		a.create_by AS "createBy.id",
		a.create_date AS "createDate",
		a.update_by AS "updateBy.id",
		a.update_date AS "updateDate",
		a.del_flag AS "delFlag"
		FROM wx_topping tt 
		left join wx_account a on a.id=tt.subject_id
        left join mod_broker b on b.id=tt.broker_id
		<where>
			tt.subject_type='account' 
			AND datediff(curdate(),tt.advertise_date)=0 
			AND curtime()>=tt.advertise_time_from 
			AND curtime()&lt;tt.advertise_time_to
			AND a.del_flag = 0
			AND a.status = 'active'
			AND NOT EXISTS(select account_id from wx_subscribes where openid=#{openid} and account_id=tt.subject_id)	
			<if test="publisherOpenid != null and publisherOpenid != ''">
				AND b.openid = #{publisherOpenid}
			</if>				
		</where>
		ORDER BY tt.advertise_weight DESC,a.update_date
	</select>	
		
	<!-- 查询待关注列表：根据点数及时间倒序排列，点数大于-5才展示。能够根据指定openid过滤 -->
	<select id="findPendingList" resultType="WxAccount">
		SELECT 
		a.id AS "id",
		a.name AS "name",
		a.original_id AS "originalId",
		a.description AS "description",
		a.status AS "status",
		a.broker_id AS "broker.id",
		b.nickname AS "broker.nickname",
		b.name AS "broker.name",
		b.points AS "broker.points",
		a.create_by AS "createBy.id",
		a.create_date AS "createDate",
		a.update_by AS "updateBy.id",
		a.update_date AS "updateDate",
		a.del_flag AS "delFlag"
		FROM wx_account a
        left join mod_broker b on b.id=a.broker_id
		<where>
			a.del_flag = 0
			AND a.status = 'active'
			AND b.points > -5
			AND a.broker_id = b.id
			<if test="openid != null and openid != ''">
				AND NOT EXISTS(select account_id from wx_subscribes where openid=#{openid} and account_id=a.id)
			</if>	
			<if test="publisherOpenid != null and publisherOpenid != ''">
				AND b.openid = #{publisherOpenid}
			</if>				
		</where>
		ORDER BY b.points DESC,a.update_date DESC
		limit #{from},#{to}
	</select>	
	
	<!-- 根据openid查询指定达人发布的公众号列表 -->
	<select id="findMyAccounts" resultType="WxAccount">
		SELECT 
		a.id AS "id",
		a.name AS "name",
		a.original_id AS "originalId",
		a.description AS "description",
		a.status AS "status",
		a.broker_id AS "broker.id",
		a.create_by AS "createBy.id",
		a.create_date AS "createDate",
		a.update_by AS "updateBy.id",
		a.update_date AS "updateDate",
		a.del_flag AS "delFlag"
		FROM wx_account a,mod_broker b
		<where>
			a.del_flag = 0
			AND b.openid = #{openid}
			AND a.broker_id = b.id
		</where>
		ORDER BY a.update_date DESC
		limit #{from},#{to}
	</select>

	<!-- 根据openid查询指定达人发布的文章总数 -->
	<select id="countMyAccounts" resultType="java.lang.Integer">
		SELECT count(a.id)
		from wx_account a,mod_broker b
		where a.del_flag = 0
		AND b.openid = #{openid}
		AND a.broker_id = b.id
	</select>
    
	<select id="get" resultType="WxAccount">
		SELECT 
			<include refid="wxAccountColumns"/>
		FROM wx_account a
		<include refid="wxAccountJoins"/>
		WHERE a.id = #{id}
	</select>
	
	<select id="findList" resultType="WxAccount">
		SELECT 
			<include refid="wxAccountColumns"/>
		FROM wx_account a
		<include refid="wxAccountJoins"/>
		<where>
			a.del_flag = #{DEL_FLAG_NORMAL}
			<if test="name != null and name != ''">
				AND a.name LIKE 
					<if test="dbName == 'oracle'">'%'||#{name}||'%'</if>
					<if test="dbName == 'mssql'">'%'+#{name}+'%'</if>
					<if test="dbName == 'mysql'">concat('%',#{name},'%')</if>
			</if>
			<if test="originalId != null and originalId != ''">
				AND a.original_id = #{originalId}
			</if>
			<if test="status != null and status != ''">
				AND a.status = #{status}
			</if>
		</where>
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY a.update_date DESC
			</otherwise>
		</choose>
	</select>
	
	<select id="findAllList" resultType="WxAccount">
		SELECT 
			<include refid="wxAccountColumns"/>
		FROM wx_account a
		<include refid="wxAccountJoins"/>
		<where>
			a.del_flag = #{DEL_FLAG_NORMAL}
		</where>		
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY a.update_date DESC
			</otherwise>
		</choose>
	</select>
	
	<insert id="insert">
		INSERT INTO wx_account(
			id,
			name,
			original_id,
			description,
			qrcode_img,
			status,
			broker_id,
			create_by,
			create_date,
			update_by,
			update_date,
			del_flag
		) VALUES (
			#{id},
			#{name},
			#{originalId},
			#{description},
			#{qrcodeImg},
			#{status},
			#{broker.id},
			#{createBy.id},
			#{createDate},
			#{updateBy.id},
			#{updateDate},
			#{delFlag}
		)
	</insert>
	
	<update id="update">
		UPDATE wx_account SET 	
			name = #{name},
			original_id = #{originalId},
			description = #{description},
			qrcode_img = #{qrcodeImg},
			status = #{status},
			broker_id = #{broker.id},
			update_by = #{updateBy.id},
			update_date = #{updateDate}
		WHERE id = #{id}
	</update>
	
	<update id="delete">
		UPDATE wx_account SET 
			del_flag = #{DEL_FLAG_DELETE}
		WHERE id = #{id}
	</update>
	
</mapper>