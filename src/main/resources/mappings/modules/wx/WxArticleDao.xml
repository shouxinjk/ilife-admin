<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.pcitech.iLife.modules.wx.dao.WxArticleDao">
    
	<sql id="wxArticleColumns">
		a.id AS "id",
		a.title AS "title",
		a.url AS "url",
		a.coverImg AS "coverImg",
		a.status AS "status",
		a.broker_id AS "broker.id",
		b.nickname AS "broker.nickname",
		b.name AS "broker.name",
		b.points AS "broker.points",
		a.channel AS "channel",
		a.create_by AS "createBy.id",
		a.create_date AS "createDate",
		a.update_by AS "updateBy.id",
		uu.name AS "updateBy.name",
		a.update_date AS "updateDate",
		a.del_flag AS "delFlag"
	</sql>
	
	<sql id="wxArticleJoins">
		LEFT JOIN sys_user uu ON uu.id = a.update_by 
		LEFT JOIN mod_broker b ON b.id = a.broker_id
	</sql>
    
	<select id="get" resultType="WxArticle">
		SELECT 
			<include refid="wxArticleColumns"/>
		FROM wx_article a
		<include refid="wxArticleJoins"/>
		WHERE a.id = #{id}
	</select>

	<!-- 查询置顶文章列表：根据权重倒序排列，仅显示在当前时间段的列表。能够根据指定openid过滤。注意，由于是付费，不受阅豆低于-2影响 -->
	<select id="findToppingList" resultType="WxArticle">
		SELECT 
		a.id AS "id",
		a.title AS "title",
		a.url AS "url",
		a.coverImg AS "coverImg",
		tt.advertise_weight AS "status",
		a.broker_id AS "broker.id",
		b.nickname AS "broker.nickname",
		b.name AS "broker.name",
		b.points AS "broker.points",
		a.channel AS "channel",
		a.create_by AS "createBy.id",
		a.create_date AS "createDate",
		a.update_by AS "updateBy.id",
		a.update_date AS "updateDate",
		(select count(id) from wx_reads rr where rr.article_id = tt.subject_id) AS "counts",
		a.del_flag AS "delFlag"
		FROM wx_topping tt 
		left join wx_article a on a.id=tt.subject_id
        left join mod_broker b on b.id=tt.broker_id
		<where>
			tt.subject_type='article' 
			AND datediff(curdate(),tt.advertise_date)=0 
			AND curtime()>=tt.advertise_time_from 
			AND curtime()&lt;tt.advertise_time_to
			AND a.del_flag = 0
			AND a.status = 'active'
			AND NOT EXISTS(select article_id from wx_reads where openid=#{openid} and article_id=tt.subject_id)		
			<if test="publisherOpenid != null and publisherOpenid != ''">
				AND b.openid = #{publisherOpenid}
			</if>			
		</where>
		ORDER BY tt.advertise_weight DESC,a.update_date
	</select>	
		
	<!-- 查询待阅度文章列表：根据点数及时间倒序排列，点数大于-2才展示。能够根据指定openid过滤 -->
	<select id="findPendingList" resultType="WxArticle">
		SELECT 
		a.id AS "id",
		a.title AS "title",
		a.url AS "url",
		a.coverImg AS "coverImg",
		a.status AS "status",
		a.broker_id AS "broker.id",
		b.nickname AS "broker.nickname",
		b.name AS "broker.name",
		b.points AS "broker.points",
		a.channel AS "channel",
		a.create_by AS "createBy.id",
		a.create_date AS "createDate",
		a.update_by AS "updateBy.id",
		a.update_date AS "updateDate",
		(select count(id) from wx_reads rr where rr.article_id = a.id) AS "counts",
		a.del_flag AS "delFlag"
		FROM wx_article a
        left join mod_broker b on b.id=a.broker_id
		<where>
			a.del_flag = 0
			AND a.status = 'active'
			AND b.points > -2
			AND a.broker_id = b.id
			<if test="openid != null and openid != ''">
				AND NOT EXISTS(select article_id from wx_reads where openid=#{openid} and article_id=a.id)
			</if>	
			<if test="publisherOpenid != null and publisherOpenid != ''">
				AND b.openid = #{publisherOpenid}
			</if>				
		</where>
		<!-- 默认优先阅豆，其次时间倒序；推广阶段优先时间倒序，其次阅豆倒序 -->
		ORDER BY a.update_date DESC,b.points DESC
		limit #{from},#{to}
	</select>	
	
	<!-- 根据openid查询指定达人发布的文章列表 -->
	<select id="findMyArticles" resultType="WxArticle">
		SELECT 
		a.id AS "id",
		a.title AS "title",
		a.url AS "url",
		a.coverImg AS "coverImg",
		a.status AS "status",
		a.broker_id AS "broker.id",
		a.channel AS "channel",
		a.create_by AS "createBy.id",
		a.create_date AS "createDate",
		a.update_by AS "updateBy.id",
		a.update_date AS "updateDate",
		(select count(id) from wx_reads rr where rr.article_id = a.id) AS "counts",
		a.del_flag AS "delFlag"
		FROM wx_article a,mod_broker b
		<where>
			a.del_flag = 0
			AND b.openid = #{openid}
			AND a.broker_id = b.id
		</where>
		ORDER BY a.update_date DESC
		limit #{from},#{to}
	</select>

	<!-- 根据openid查询指定达人发布的文章总数 -->
	<select id="countMyArticles" resultType="java.lang.Integer">
		SELECT count(a.id)
		from wx_article a,mod_broker b
		where a.del_flag = 0
		AND b.openid = #{openid}
		AND a.broker_id = b.id
	</select>
	
	<select id="findList" resultType="WxArticle">
		SELECT 
			<include refid="wxArticleColumns"/>
		FROM wx_article a
		<include refid="wxArticleJoins"/>
		<where>
			a.del_flag = #{DEL_FLAG_NORMAL}
			<if test="title != null and title != ''">
				AND a.title LIKE 
					<if test="dbName == 'oracle'">'%'||#{title}||'%'</if>
					<if test="dbName == 'mssql'">'%'+#{title}+'%'</if>
					<if test="dbName == 'mysql'">concat('%',#{title},'%')</if>
			</if>
			<if test="status != null and status != ''">
				AND a.status = #{status}
			</if>
			<if test="broker != null and broker.id != null and broker.id != ''">
				AND a.broker_id = #{broker.id}
			</if>
			<if test="channel != null and channel != ''">
				AND a.channel = #{channel}
			</if>
		</where>
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY a.update_date DESC
			</otherwise>
		</choose>
	</select>
	
	<select id="findAllList" resultType="WxArticle">
		SELECT 
			<include refid="wxArticleColumns"/>
		FROM wx_article a
		<include refid="wxArticleJoins"/>
		<where>
			a.del_flag = #{DEL_FLAG_NORMAL}
		</where>		
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY a.update_date DESC
			</otherwise>
		</choose>
	</select>
	
	<insert id="insert">
		INSERT INTO wx_article(
			id,
			title,
			url,
			coverImg,
			status,
			broker_id,
			channel,
			create_by,
			create_date,
			update_by,
			update_date,
			del_flag
		) VALUES (
			#{id},
			#{title},
			#{url},
			#{coverImg},
			#{status},
			#{broker.id},
			#{channel},
			#{createBy.id},
			#{createDate},
			#{updateBy.id},
			#{updateDate},
			#{delFlag}
		)
	</insert>
	
	<update id="update">
		UPDATE wx_article SET 	
			title = #{title},
			url = #{url},
			coverImg = #{coverImg},
			status = #{status},
			broker_id = #{broker.id},
			channel = #{channel},
			update_by = #{updateBy.id},
			update_date = #{updateDate}
		WHERE id = #{id}
	</update>
	
	<update id="delete">
		UPDATE wx_article SET 
			del_flag = #{DEL_FLAG_DELETE}
		WHERE id = #{id}
	</update>
	
</mapper>