<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.pcitech.iLife.modules.mod.dao.BrokerDao">
    
	<sql id="brokerColumns">
		a.parent_id AS "parent.id",
		p.name AS "parent.name",
		p.nickname AS "parent.nickname",
		a.orgnization_id AS "orgnization.id",
		org.name AS "orgnization.name",
		a.sys_user_id AS "sysUser.id",
		su.name AS "sysUser.name",
		su.login_name AS "sysUser.loginName",
		a.id AS "id",
		a.openid AS "openid",
		a.nickname AS "nickname",
		a.avatarUrl AS "avatarUrl",
		a.name AS "name",
		a.phone AS "phone",
		a.email AS "email",
		a.hierarchy AS "hierarchy",
		a.security_no AS "securityNo",
		a.level AS "level",
		a.alipay_account AS "alipayAccount",
		a.alipay_accountname AS "alipayAccountName",
		a.status AS "status",
		a.upgrade AS "upgrade",
		a.qrcodeUrl AS "qrcodeUrl",
		a.points AS "points",
		a.coins AS "coins",
		a.token AS "token",
		a.create_by AS "createBy.id",
		a.create_date AS "createDate",
		a.update_by AS "updateBy.id",
		a.update_date AS "updateDate",
		a.del_flag AS "delFlag"
	</sql>
	
	<sql id="brokerJoins">
		LEFT JOIN sys_user uu ON uu.id = a.update_by 
		LEFT JOIN sys_office org ON org.id = a.orgnization_id 
		LEFT JOIN sys_user su ON su.id = a.sys_user_id 
		LEFT JOIN mod_broker p ON p.id = a.parent_id	
	</sql>
    
	<sql id="moneyColumns">
		a.id AS "id",
		a.openid AS "openid",
		a.name AS "name",
		a.phone AS "phone",
		a.email AS "email",
		a.hierarchy AS "hierarchy",
		a.level AS "level",
		a.create_date AS "createDate",
		ifnull((SELECT sum(sTotal.amount_profit) FROM mod_clearing sTotal where sTotal.beneficiary=a.id),0) AS "totalAmount",
		ifnull((SELECT sum(sPaying.amount_request) FROM mod_payment sPaying where sPaying.broker_id=a.id and sPaying.status='pending'),0) AS "payingAmount",
		ifnull((SELECT sum(sPaid.amount_request) FROM mod_payment sPaid where sPaid.broker_id=a.id and sPaid.status='done'),0) AS "paidAmount",
		ifnull((SELECT sum(sCashed.amount_profit) FROM mod_clearing sCashed where sCashed.status_clear="cleared" and sCashed.status_cash="cashed" and sCashed.beneficiary=a.id),0) AS "payableAmount",
		ifnull((SELECT sum(sLocked.amount_profit) FROM mod_clearing sLocked where sLocked.status_clear="locked" and sLocked.status_cash="cashed" and sLocked.beneficiary=a.id),0) AS "lockedAmount",
		ifnull(sum(pay.amount_request),0) AS "paidAmount"
	</sql>
	
	<sql id="moneyJoins">
		LEFT JOIN mod_payment pay ON pay.broker_id = a.id	 and pay.status='paid'
	</sql>    

	<select id="getMoney" resultType="java.util.HashMap">
		SELECT 
			<include refid="moneyColumns"/>
		FROM mod_broker a
		<include refid="moneyJoins"/>
		WHERE a.id = #{id}
	</select>

	<select id="countChilds" resultType="Integer">
		SELECT count(*) FROM mod_broker a WHERE a.parent_id = #{id}
	</select>
    
	<select id="get" resultType="Broker">
		SELECT 
			<include refid="brokerColumns"/>
		FROM mod_broker a
		<include refid="brokerJoins"/>
		WHERE a.id = #{id}
	</select>
	
	<select id="getByOpenid" resultType="Broker">
		SELECT 
			<include refid="brokerColumns"/>
		FROM mod_broker a
		<include refid="brokerJoins"/>
		WHERE a.openid = #{openid} limit 1
	</select>	
	
	<select id="getByNickname" resultType="Broker">
		SELECT 
			<include refid="brokerColumns"/>
		FROM mod_broker a
		<include refid="brokerJoins"/>
		WHERE a.nickname = #{nickname} limit 1
	</select>		

	<select id="getBySysUserid" resultType="Broker">
		SELECT 
			<include refid="brokerColumns"/>
		FROM mod_broker a
		<include refid="brokerJoins"/>
		WHERE a.sys_user_id = #{sysUserId} limit 1
	</select>	
	
	<!-- 分页返回下级列表 -->
	<select id="findChildList" resultType="Broker">
		SELECT 
			<include refid="brokerColumns"/>
		FROM mod_broker a
		<include refid="brokerJoins"/>
		<where>
			a.del_flag = 0
			<if test="status != null and status != ''">
				AND a.status = #{status}
			</if>			
			<if test="parentId != null and parentId != ''">
				AND a.parent_id = #{parentId}
			</if>			
		</where>
		ORDER BY a.update_date DESC
		limit #{from},#{to}
	</select>	
	
	<!-- 查询待通知流量主达人，输入查询的天数。返回达人ID列表，注意未分页， 是直接返回全部 -->
	<select id="findNotifyCandidatePublisherIdList" resultType="String">
	SELECT distinct(broker_id) FROM wx_reads where create_date>=date_sub(now(), interval #{days} day)
	UNION
	select distinct(broker_id) from wx_subscribes  where create_date>=date_sub(now(), interval #{days} day)
	</select>

	<!-- 
	查询流量主收益，包括基本信息、获得阅读总数、订阅总数、文章总数、公众号数量 
	输入参数：days：int 查询的天数，brokerId：string，达人ID
	-->
	<select id="findNotifyPublisherStat" resultType="java.util.Map">
	select 
	date_sub(now(), interval #{days} day) as timeStart, 
	now() as timeEnd, 
	a.id as brokerId, 
	a.nickname as nickname, 
	a.openid as openid, 
	a.points as points, 
	(select count(id) from wx_article where broker_id=a.id) as articlesCount,
	(select count(id) from wx_account where broker_id=a.id) as accountsCount, 
	(select count(rr.id) from wx_reads rr left join wx_article aa on aa.id=rr.article_id where aa.broker_id=a.id and rr.create_date>=date_sub(now(), interval #{days} day)) as readsCount, 
	(select count(ss.id) from wx_subscribes ss left join wx_account ac on ac.id=ss.account_id where ac.broker_id=a.id and ss.create_date>=date_sub(now(), interval #{days} day)) as subscribesCount 
	from mod_broker a where a.id = #{brokerId}
	</select>		

	<!-- 
	查询流量主阅读汇总：查询当前时间前一天的阅读汇总，并按照阅读数倒序排列。
	参数：days：查询天数；total：返回结果数
	-->
	<select id="countPublisherReads" resultType="java.util.Map">
		SELECT count(rr.id) as total,b.openid,b.nickname,b.points,b.id
		from mod_broker b 
		left join wx_reads rr on rr.openid=b.openid 
		where rr.create_date>= date_sub(now(), interval #{days} day) 
		group by rr.openid 
		order by total desc 
		limit #{total}
	</select>	

	<!-- 
	查询沉寂流量主
	输入参数：无
	查询条件：status != 'offline' and (nickname ='' or nickname is null) and points=20
	-->
	<select id="findInactivePublisherIdList" resultType="Broker">
		SELECT 
			<include refid="brokerColumns"/>
		FROM mod_broker a
		<include refid="brokerJoins"/>
		<where>
			(a.status = 'ready' or a.status = 'pending')
			AND (a.nickname is null or a.nickname = '')	
			AND a.points = 20	
		</where>
	</select>		
	
	<select id="findList" resultType="Broker">
		SELECT 
			<include refid="brokerColumns"/>
		FROM mod_broker a
		<include refid="brokerJoins"/>
		<where>
			a.del_flag = #{DEL_FLAG_NORMAL}
			<if test="status != null and status != ''">
				AND a.status = #{status}
			</if>			
			<if test="name != null and name != ''">
				AND a.name LIKE 
					<if test="dbName == 'oracle'">'%'||#{name}||'%'</if>
					<if test="dbName == 'mssql'">'%'+#{name}+'%'</if>
					<if test="dbName == 'mysql'">concat('%',#{name},'%')</if>
			</if>
			<if test="parent != null and parent.id != null and parent.id != ''">
				AND a.parent_id = #{parent.id}
			</if>			
		</where>
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY a.update_date DESC
			</otherwise>
		</choose>
	</select>
	
	<select id="findAllList" resultType="Broker">
		SELECT 
			<include refid="brokerColumns"/>
		FROM mod_broker a
		<include refid="brokerJoins"/>
		<where>
			a.del_flag = #{DEL_FLAG_NORMAL}
		</where>		
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY a.update_date DESC
			</otherwise>
		</choose>
	</select>
	
	<insert id="insert">
		INSERT INTO mod_broker(
			parent_id,
			orgnization_id,
			sys_user_id,
			id,
			openid,
			nickname,
			avatarUrl,
			name,
			phone,
			email,
			hierarchy,
			security_no,
			level,
			alipay_account,
			alipay_accountname,
			status,
			upgrade,
			qrcodeUrl,
			points,
			coins,
			token,
			create_by,
			create_date,
			update_by,
			update_date,
			del_flag
		) VALUES (
			#{parent.id},
			#{orgnization.id},
			#{sysUser.id},
			#{id},
			#{openid},
			#{nickname},
			#{avatarUrl},
			#{name},
			#{phone},
			#{email},
			#{hierarchy},
			#{securityNo},
			#{level},
			#{alipayAccount},
			#{alipayAccountName},
			#{status},
			#{upgrade},
			#{qrcodeUrl},
			#{points},
			#{coins},
			#{token},
			#{createBy.id},
			#{createDate},
			#{updateBy.id},
			#{updateDate},
			#{delFlag}
		)
	</insert>
	
	<update id="update">
		UPDATE mod_broker SET 	
			parent_id = #{parent.id},
			orgnization_id = #{orgnization.id},
			sys_user_id = #{sysUser.id},
			openid = #{openid},
			nickname = #{nickname},
			avatarUrl = #{avatarUrl},
			name = #{name},
			phone = #{phone},
			email = #{email},
			hierarchy = #{hierarchy},
			security_no = #{securityNo},
			level = #{level},
			alipay_account = #{alipayAccount},
			alipay_accountname = #{alipayAccountName},
			status = #{status},
			upgrade = #{upgrade},
			qrcodeUrl = #{qrcodeUrl},
			points = #{points},
			coins = #{coins},
			token = #{token},
			update_by = #{updateBy.id},
			update_date = #{updateDate}
		WHERE id = #{id}
	</update>
	
	<update id="delete">
		UPDATE mod_broker SET 
			del_flag = #{DEL_FLAG_DELETE}
		WHERE id = #{id}
	</update>
	
</mapper>