<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.pcitech.iLife.modules.mod.dao.BrokerPerformanceDao">
    
	<sql id="performanceColumns">
		a.id AS "id",
		a.broker_id AS "broker.id",
		p.openid AS "broker.openid",
		p.name AS "broker.name",
		a.task_type AS "taskType",
		a.count_share AS "countShare",
		a.count_view AS "countView",
		a.count_buy AS "countBuy",
		a.count_order AS "countOrder",
		a.count_team AS "countTeam",
		a.amount_order AS "amountOrder",
		a.amount_team AS "amountTeam",
		a.amount_buy AS "amountBuy",
		a.amount_credit AS "amountCredit",
		a.status_calc AS "statusCalc",
		a.status_notify AS "statusNotify",
		a.date_calc AS "dateCalc",
		a.date_notify AS "dateNotify",
		a.create_by AS "createBy.id",
		a.create_date AS "createDate",
		a.update_by AS "updateBy.id",
		a.update_date AS "updateDate",
		a.del_flag AS "delFlag"
	</sql>
	
	<sql id="performanceJoins">
		LEFT JOIN sys_user uu ON uu.id = a.update_by
		LEFT JOIN mod_broker p ON p.id = a.broker_id			
	</sql>
    
	<select id="get" resultType="BrokerPerformance">
		SELECT 
			<include refid="performanceColumns"/>
		FROM mod_performance a
		<include refid="performanceJoins"/>
		WHERE a.id = #{id}
	</select>
	
	<select id="findList" resultType="BrokerPerformance">
		SELECT 
			<include refid="performanceColumns"/>
		FROM mod_performance a
		<include refid="performanceJoins"/>
		<where>
			a.del_flag = #{DEL_FLAG_NORMAL}
		</where>
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY a.update_date DESC
			</otherwise>
		</choose>
	</select>

	<select id="findListByTaskType" resultType="BrokerPerformance">
		SELECT 
			<include refid="performanceColumns"/>
		FROM mod_performance a
		<include refid="performanceJoins"/>
		<where>
			a.del_flag = #{DEL_FLAG_NORMAL} 
			AND (a.status_calc='pending' OR a.status_notify='pending') 
			AND a.task_type=#{type}
		</where>
		limit 10
	</select>
	
	<sql id="calcColumns">
		a.id AS "id",
		a.openid AS "openid",
		a.name AS "name",
		ifnull((SELECT sum(c.amount_profit) FROM mod_clearing c1,mod_profit_share_item i1 where i1.id=c1.scheme_item_id and i1.beneficiary='broker' and c1.beneficiary=a.id and  c1.create_date &gt;= #{startDateTime} and c1.create_date &lt; #{endDateTime}),0) AS "sumOrder",
		ifnull((SELECT sum(c.amount_profit) FROM mod_clearing c2,mod_profit_share_item i2 where i2.id=c2.scheme_item_id and (i2.beneficiary='parent' or i2.beneficiary='grandpa') and c2.beneficiary=a.id and  c2.create_date &gt;= #{startDateTime} and c2.create_date &lt; #{endDateTime}),0) AS "sumTeam",
		ifnull((SELECT sum(c.amount_profit) FROM mod_clearing c3,mod_profit_share_item i3 where i3.id=c3.scheme_item_id and i3.beneficiary='credit' and c3.beneficiary=a.id and  c3.create_date &gt;= #{startDateTime} and c3.create_date &lt; #{endDateTime}),0) AS "sumCredit",
		ifnull((SELECT sum(c.amount_profit) FROM mod_clearing c4,mod_profit_share_item i4 where i4.id=c4.scheme_item_id and i4.beneficiary='buy' and c4.beneficiary=a.id and  c4.create_date &gt;= #{startDateTime} and c4.create_date &lt; #{endDateTime}),0) AS "sumBuy",
		ifnull((SELECT count(b.id) FROM mod_broker b where b.parent_id=a.id and  b.create_date &gt;= #{startDateTime} and b.create_date &lt; #{endDateTime}),0) AS "countTeamMembers",
		ifnull((SELECT count(o.id) FROM mod_order b where o.broker_id=a.id and  o.create_date &gt;= #{startDateTime} and o.create_date &lt; #{endDateTime}),0) AS "countOrders",
		ifnull((SELECT count(*) FROM mod_user_action u1 where u1.fromBroker=a.id and u1.actionType='share' and u1.createOn &gt;= #{startDateTime} and u1.createOn &lt; #{endDateTime}),0) AS "countShares",
		ifnull((SELECT count(*) FROM mod_user_action u2 where u2.fromBroker=a.id and u2.actionType='view' and u2.createOn &gt;= #{startDateTime} and u2.createOn &lt; #{endDateTime}),0) AS "countViews",
		ifnull((SELECT count(*) FROM mod_user_action u3 where u3.fromBroker=a.id and u3.actionType='buy' and u3.createOn &gt;= #{startDateTime} and u3.createOn &lt; #{endDateTime}),0) AS "countBuys"
	</sql>
	
	<sql id="calcJoins">
	</sql>    

	<select id="getPerformanceCalcResult" resultType="java.util.HashMap">
		SELECT 
			<include refid="calcColumns"/>
		FROM mod_broker a
		<include refid="calcJoins"/>
		WHERE a.id = #{brokerId}
	</select>	
	
	<select id="findAllList" resultType="BrokerPerformance">
		SELECT 
			<include refid="performanceColumns"/>
		FROM mod_performance a
		<include refid="performanceJoins"/>
		<where>
			a.del_flag = #{DEL_FLAG_NORMAL}
		</where>		
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY a.update_date DESC
			</otherwise>
		</choose>
	</select>

	<!-- 查询所有broker建立初始任务。通过taskType、brokerId、currentDate进行区分 -->
	<insert id="insertByBroker">
		INSERT INTO mod_performance (id,task_type,broker_id,create_date)
		  SELECT md5(concat(CURRENT_DATE,id,#{type})),#{type},id,now()
		  FROM mod_broker
	</insert>
	
	<insert id="insert">
		INSERT INTO mod_performance(
			id,
			broker_id,
			task_type,
			count_share,
			count_view,
			count_buy,
			count_order,
			count_team,
			amount_order,
			amount_team,
			amount_buy,
			amount_credit,
			status_calc,
			status_notify,
			date_calc,
			date_notify,
			create_by,
			create_date,
			update_by,
			update_date,
			del_flag
		) VALUES (
			#{id},
			#{broker.id},
			#{taskType},
			#{countShare},
			#{countView},
			#{countBuy},
			#{countOrder},
			#{countTeam},
			#{amountOrder},
			#{amountTeam},
			#{amountBuy},
			#{amountCredit},
			#{statusCalc},
			#{statusNotify},
			#{dateCalc},
			#{dateNotify},
			#{createBy.id},
			#{createDate},
			#{updateBy.id},
			#{updateDate},
			#{delFlag}
		)
	</insert>
	
	<update id="update">
		UPDATE mod_performance SET 	
			broker_id = #{broker.id},
			task_type = #{taskType},
			count_share = #{countShare},
			count_view = #{countView},
			count_buy = #{countBuy},
			count_order = #{countOrder},
			count_team = #{countTeam},
			amount_order = #{amountOrder},
			amount_team = #{amountTeam},
			amount_buy = #{amountBuy},
			amount_credit = #{amountCredit},
			status_calc = #{statusCalc},
			status_notify = #{statusNotify},
			date_calc = #{dateCalc},
			date_notify = #{dateNotify},
			update_by = #{updateBy.id},
			update_date = #{updateDate}
		WHERE id = #{id}
	</update>
	
	<update id="delete">
		UPDATE mod_performance SET 
			del_flag = #{DEL_FLAG_DELETE}
		WHERE id = #{id}
	</update>
	
</mapper>